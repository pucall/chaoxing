name: 刷课任务自动化

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  # 定义观看时长变量（分钟）
  # 自动触发：0=到12点，>0=指定分钟数
  # 手动触发：0=4小时，>0=指定分钟数
  WATCH_DURATION_MINUTES: ${{ vars.WATCH_DURATION || 0 }}

jobs:
  Start:
    runs-on: ubuntu-latest

    steps:
      - name: 🚀 拷贝代码
        uses: actions/checkout@v4

      - name: ⏰ 执行时段检查
        id: time-check
        env:
          WATCH_DURATION: ${{ env.WATCH_DURATION_MINUTES }}
        run: |
          echo "触发事件名称: $GITHUB_EVENT_NAME"
          echo "设置的观看时长: ${WATCH_DURATION} 分钟"

          if [ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]; then
              # 手动触发逻辑
              if [ "${WATCH_DURATION}" -eq 0 ]; then
                  # 手动触发 + 时长为0 = 4小时
                  timeout_seconds=$(( 4 * 60 * 60 ))
                  echo "手动触发，默认观看时长: 4小时 (${timeout_seconds}秒)"
                  echo "timeout_prefix=timeout --preserve-status $timeout_seconds" >> "$GITHUB_OUTPUT"
              else
                  # 手动触发 + 时长>0 = 指定分钟
                  timeout_seconds=$(( WATCH_DURATION * 60 ))
                  echo "手动触发，自定义观看时长: ${WATCH_DURATION} 分钟"
                  echo "timeout_prefix=timeout --preserve-status $timeout_seconds" >> "$GITHUB_OUTPUT"
              fi
          else
              # 自动触发逻辑（schedule/push）
              export TZ=Asia/Shanghai
              current_hour=$(date +'%-H')
              current_min=$(date +'%-M')
              
              echo "当前北京时间: $(date +'%H:%M')"

              # 校验是否在 08:00 到 11:59 的有效窗口内
              if [ "$current_hour" -lt 8 ]; then
                echo "::error::❌ 当前北京时间 $(date +'%H:%M')，早间窗口未开启 (需 >= 08:00)"
                exit 1
              elif [ "$current_hour" -ge 12 ]; then
                echo "::error::❌ 当前北京时间 $(date +'%H:%M')，午间窗口已关闭 (需 < 12:00)"
                exit 1
              else
                # 计算到 12:00 整的剩余秒数
                target_minutes_of_day=$(( 12 * 60 ))
                current_minutes_of_day=$(( current_hour * 60 + current_min ))
                
                remain_minutes=$(( target_minutes_of_day - current_minutes_of_day ))
                remain_seconds=$(( remain_minutes * 60 ))
                
                if [ "${WATCH_DURATION}" -eq 0 ]; then
                  # 自动触发 + 时长为0 = 到12点
                  final_seconds=$remain_seconds
                  final_minutes=$remain_minutes
                  echo "✅ 自动触发，使用默认时长到12点: ${final_minutes} 分钟"
                else
                  # 自动触发 + 时长>0 = 指定分钟（不能超过12点）
                  custom_seconds=$(( WATCH_DURATION * 60 ))
                  if [ "$custom_seconds" -lt "$remain_seconds" ]; then
                    final_seconds=$custom_seconds
                    final_minutes=$WATCH_DURATION
                    echo "✅ 自动触发，使用自定义观看时长: ${final_minutes} 分钟"
                  else
                    final_seconds=$remain_seconds
                    final_minutes=$remain_minutes
                    echo "✅ 自动触发，自定义时长超过窗口限制，使用剩余窗口时长: ${final_minutes} 分钟"
                  fi
                fi
                
                echo "最终执行时长：${final_minutes}分（${final_seconds}秒）"
                echo "timeout_prefix=timeout --preserve-status $final_seconds" >> "$GITHUB_OUTPUT"
              fi
          fi

      - name: 🐍 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 📦 安装 Python 依赖
        run: |
          echo "正在升级 pip 工具自身..."
          python -m pip install --upgrade pip
          echo "正在安装 requirements.txt 中列出的依赖..."
          pip install -r requirements.txt
          echo "所有依赖安装完成。"

      - name: 🚀 执行刷课任务
        if: ${{ success() }}
        env:
          ACCOUNT_USR: ${{ secrets.USR }}
          ACCOUNT_PSW: ${{ secrets.PSW }}
          COURSE_LESSON: ${{ vars.LESSON }}
        run: |
          echo "开始执行 main.py 脚本..."
          ${{ steps.time-check.outputs.timeout_prefix }} \
            python main.py -u "$ACCOUNT_USR" -p "$ACCOUNT_PSW" -l "$COURSE_LESSON" -a continue
          echo "main.py 脚本执行完毕或因超时而终止。"
